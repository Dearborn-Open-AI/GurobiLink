cmake_minimum_required(VERSION 3.15)

if(POLICY CMP0091)
	cmake_policy(SET CMP0091 NEW)
endif()

project(GUROBILink)

string(TIMESTAMP BUILD_TIME "%d %b %Y at %H:%M")

set(GUROBI_VERSION "9.0.2" CACHE STRING "GUROBI version")
string(REGEX REPLACE "([0-9]+)\\.[0-9]+\\.[0-9]+.*" "\\1" MAJ_VER ${GUROBI_VERSION})
set(GUROBI_MAJOR_VERSION ${MAJ_VER} CACHE STRING "Gurobi major version number" FORCE)
string(REGEX REPLACE "[0-9]+\\.([0-9]+)\\.[0-9]+.*" "\\1" MIN_VER ${GUROBI_VERSION})
set(GUROBI_MINOR_VERSION ${MIN_VER} CACHE STRING "Gurobi major version number" FORCE)

set(GUROBI_ROOT "${CMAKE_CURRENT_SOURCE_DIR}/Libraries/Gurobi/${GUROBI_VERSION}" CACHE PATH "GUROBI installation")

set(INSTALL_PDB OFF CACHE BOOL "Include PDB file in paclet layout")

set(PACLET_VERSION 1.0.1 CACHE STRING "Paclet version")
set(TARGET_WOLFRAM_VERSION 12.3+ CACHE STRING "Target Mathematica version")

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${PROJECT_BINARY_DIR}/install" CACHE PATH "Install prefix" FORCE)
endif()

set(GUROBI_DLL
	${CMAKE_SHARED_LIBRARY_PREFIX}gurobi${GUROBI_MAJOR_VERSION}${GUROBI_MINOR_VERSION}${CMAKE_SHARED_LIBRARY_SUFFIX}
)
set(GUROBI_LIB ${GUROBI_DLL})

if(WIN32)
	set(SYSTEMID Windows-x86-64)
	set(PLATFORM win64)
	set(QUALIFIER Win64)
	string(REPLACE "${CMAKE_SHARED_LIBRARY_SUFFIX}" "${CMAKE_IMPORT_LIBRARY_SUFFIX}" GUROBI_LIB ${GUROBI_DLL})
	set(MATHEMATICA_LAYOUT "C:/Program Files/Wolfram Research/Mathematica/12.3" CACHE PATH "Mathematica installation")
elseif(APPLE)
	set(SYSTEMID MacOSX-x86-64)
	set(PLATFORM mac64)
	set(QUALIFIER Mac64)
	execute_process(
		COMMAND otool -D "${GUROBI_ROOT}/${PLATFORM}/lib/${GUROBI_LIB}"
		OUTPUT_VARIABLE OTOOL_OUT
	)
	string(REGEX REPLACE "^.*:.|.$" "" GUROBI_LIB_INSTALL_NAME ${OTOOL_OUT})
	set(CMAKE_BUILD_WITH_INSTALL_RPATH ON)
	set(MATHEMATICA_LAYOUT "/Applications/Mathematica.app/Contents" CACHE PATH "Mathematica installation")
elseif(UNIX)
	set(SYSTEMID Linux-x86-64)
	set(PLATFORM linux64)
	set(QUALIFIER Lin64)
	set(CMAKE_INSTALL_RPATH "\$ORIGIN")
	set(MATHEMATICA_LAYOUT "/usr/local/Wolfram/Mathematica/12.3" CACHE PATH "Mathematica installation")
endif()

if(WIN32)
	set(GUROBI_DLL_PATH "${GUROBI_ROOT}/${PLATFORM}/bin")
else()
	set(GUROBI_DLL_PATH "${GUROBI_ROOT}/${PLATFORM}/lib")
endif()
set(GUROBI_LIBRARY_PATH "${GUROBI_ROOT}/${PLATFORM}/lib")
set(GUROBI_INCLUDE_PATH "${GUROBI_ROOT}/${PLATFORM}/include")

if(NOT WOLFRAM_INCLUDE_PATH)
	set(WOLFRAM_INCLUDE_PATH "${MATHEMATICA_LAYOUT}/SystemFiles/IncludeFiles/C")
endif()

set(GUROBILINK_SOURCES
	CSource/GUROBILink.cpp
	CSource/GUROBISolution.cpp
)

set(PACLET_DESTINATION ${CMAKE_INSTALL_PREFIX}/${FULL} CACHE PATH "Full build destination")
set(PACLET_LIBDIR ${CMAKE_INSTALL_PREFIX}/${PROJECT_NAME}/LibraryResources/${SYSTEMID})

add_library(${PROJECT_NAME} SHARED ${GUROBILINK_SOURCES})
set_target_properties(${PROJECT_NAME} PROPERTIES
	MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>"
	PREFIX ""
)
target_include_directories(${PROJECT_NAME} PRIVATE
	${CMAKE_SOURCE_DIR}/CSource
	${GUROBI_INCLUDE_PATH}
	${WOLFRAM_INCLUDE_PATH}
)
target_link_directories(${PROJECT_NAME} PRIVATE ${GUROBI_LIBRARY_PATH})
target_link_libraries(${PROJECT_NAME} PRIVATE ${GUROBI_LIB})
target_compile_definitions(${PROJECT_NAME} PRIVATE "$<$<CONFIG:DEBUG>:DEBUG>")

if(APPLE)
	add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
		COMMAND install_name_tool -change ${GUROBI_LIB_INSTALL_NAME} @loader_path/${GUROBI_LIB} $<TARGET_FILE_NAME:${PROJECT_NAME}>
		COMMENT "Setting rpath for ${GUROBI_LIB}"
	)
endif()

install(TARGETS ${PROJECT_NAME}
		LIBRARY DESTINATION ${PACLET_LIBDIR}
		RUNTIME DESTINATION ${PACLET_LIBDIR}
)

install(FILES
	${GUROBI_DLL_PATH}/${GUROBI_DLL}
	DESTINATION ${PACLET_LIBDIR}
)

if(INSTALL_PDB)
	install(FILES $<TARGET_PDB_FILE:${PROJECT_NAME}> DESTINATION ${PACLET_LIBDIR} OPTIONAL)
endif()

configure_file(
	${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}/PacletInfo.m.in
	${CMAKE_BINARY_DIR}/generated/PacletInfo.m
)

set(WL_SOURCES
	${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}/${PROJECT_NAME}.m
	${CMAKE_BINARY_DIR}/generated/PacletInfo.m
)

install(FILES ${WL_SOURCES} DESTINATION ${CMAKE_INSTALL_PREFIX}/${PROJECT_NAME})